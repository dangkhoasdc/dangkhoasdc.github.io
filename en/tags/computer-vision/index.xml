<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>computer vision on Dang-Khoa&#39;s blog</title>
    <link>http://dangkhoasdc.github.io/en/tags/computer-vision/</link>
    <description>Recent content in computer vision on Dang-Khoa&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>vi</language>
    <lastBuildDate>Thu, 08 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://dangkhoasdc.github.io/en/tags/computer-vision/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OpenCV on Android: practices and tips</title>
      <link>http://dangkhoasdc.github.io/en/post/2018/03/08/opencv-on-android-practices-and-tips/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://dangkhoasdc.github.io/en/post/2018/03/08/opencv-on-android-practices-and-tips/</guid>
      <description>Transfer MAT objects from Android to NDK The main idea is to use the address of an MAT object in order to manipulate the data.
Basically, we have a function playing as a bridge between Java APIs and NDK:
public native void function_name(long matAddress); To call the function, we use Mat&amp;rsquo;s address by calling getNativeObjAddr(). All computations in NDK will affect the content of MAT in both Java and NDK layers.</description>
    </item>
    
  </channel>
</rss>