<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Dang-Khoa&#39;s blog </title>
    <link>http://dangkhoasdc.github.io/tags/python/</link>
    <description>Recent content in Python on Dang-Khoa&#39;s blog </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Dang-Khoa</copyright>
    <lastBuildDate>Mon, 20 Jul 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/python/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Lập Trình Hướng Đối Tượng Trong Python</title>
      <link>http://dangkhoasdc.github.io/post/oop-python/</link>
      <pubDate>Mon, 20 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://dangkhoasdc.github.io/post/oop-python/</guid>
      <description>

&lt;p&gt;Bài viết tập trung các thủ thuật khi sử dụng kỹ thuật Hướng Đối Tượng trong Python. Thực ra trong Python, các khái niệm về hướng đối tượng đã được giản lược nhiều. Thêm vào đó, lại không có những khái niệm phức tạp như access modifier, destructor, &amp;hellip; Việc xây dựng các class cũng vì thế đơn giản hơn.&lt;/p&gt;

&lt;h2 id=&#34;không-multiple-constructors&#34;&gt;Không multiple constructors&lt;/h2&gt;

&lt;p&gt;Nhưng ta có thể sử dụng &lt;code&gt;optical argument&lt;/code&gt; như một thế mạnh và thay thế cho multiple constructor.&lt;/p&gt;

&lt;h2 id=&#34;không-access-modifier&#34;&gt;Không access modifier&lt;/h2&gt;

&lt;p&gt;Đồng nghĩa với việc không có &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt; hay là &lt;code&gt;protected&lt;/code&gt; gì cả. Ngay cả việc thêm &lt;code&gt;__&lt;/code&gt; vào trước properties hay method cũng không giải quyết được vấn đề. Với mỗi thuộc tính &lt;code&gt;__p&lt;/code&gt; của lớp &lt;code&gt;A&lt;/code&gt; đơn giản là được đổi tên thành &lt;code&gt;_A__p&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;tạo-property&#34;&gt;Tạo property&lt;/h2&gt;

&lt;p&gt;Nếu được, tạo thành method thay thế. Còn không có thể sử dụng decorator &lt;code&gt;@property&lt;/code&gt; trước method để đổi thành property.&lt;/p&gt;

&lt;h2 id=&#34;đa-kế-thừa&#34;&gt;Đa kế thừa&lt;/h2&gt;

&lt;p&gt;Tránh vấn đề này càng tốt. Tham khảo &lt;a href=&#34;https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem&#34; target=&#34;_blank&#34;&gt;tại đây&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;các-thuộc-tính-và-method-static&#34;&gt;Các thuộc tính và method static&lt;/h2&gt;

&lt;p&gt;Mình không nghĩ là cần thuộc tính hay method static cho lắm. Nếu có thể cài thuộc tính/method static thì thay vào đó có thể đặt bên ngoài class và xếp trong cùng module. Nhưng vậy có thể truy cập các thuộc tính, hàm thông qua module thay vì class, và mình thấy hầu như không khác nhau là mấy.&lt;/p&gt;

&lt;h2 id=&#34;gọi-constructor-từ-lớp-cha&#34;&gt;Gọi constructor từ lớp cha&lt;/h2&gt;

&lt;p&gt;Đây là một vấn đề khá nan giải trong trường hợp đa kế thừa. Giả sử ta có lớp A, lớp B và C. Trong đó lớp C kế thừa vừa lớp A và lớp B. Vấn đề là làm thế nào để gọi A, B trong hàm khởi tạo, và làm thế nào để biết lớp cha nào được gọi trước.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class A(object):
    def __init__(self):
        super(A, self).__init__()
        print &amp;quot;entering A&amp;quot;
        print &amp;quot;leaving A&amp;quot;

class B(object):
    def __init__(self):
        super(B, self).__init__()
        print &amp;quot;entering B&amp;quot;
        print &amp;quot;leaving B&amp;quot;

class C(A,B):
    def __init__(self):
        print &amp;quot;entering c&amp;quot;
        super(C, self).__init__()
        print &amp;quot;leaving c&amp;quot;


if __name__ == &#39;__main__&#39;:
    c = C()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Có một số điều khá thú vị xoay quanh điều này sau khi ta thử nghiệm hoán vị trình tự kế thừa, trình tự định nghĩa lớp:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Trong mỗi hàm phải khai báo &lt;code&gt;super(ClassName, self).__init__()&lt;/code&gt; thì việc gọi các hàm khởi tạo từ các lớp cha mới thực hiện được.&lt;/li&gt;
&lt;li&gt;Không phụ thuộc vào trình tự kế thừa.&lt;/li&gt;
&lt;li&gt;Trình tự hàm khởi tạo được gọi dựa them alphabet.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;practices&#34;&gt;Practices&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Để kiểm tra một biến có phải là 1 thể hiện của lớp không, sử dụng hàm &lt;code&gt;isinstance&lt;/code&gt;, tuy nhiên khuyến khích không xài. Vì Python là Duck Type mà.&lt;/li&gt;
&lt;li&gt;Khai báo một thứ na ná struct trong C/C++:
{% highlight python %}
class ClassName:
pass
{% endhighlight%}&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sau đó thì có thể tha hồ thêm thuộc tính nào vào cũng được.&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/2/tutorial/classes.html&#34; target=&#34;_blank&#34;&gt;https://docs.python.org/2/tutorial/classes.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;P.s: Các chủ đề hại não và nâng cao có thể được đề cập là Iterators, Generators, &amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kinh Nghiệm Viết Tài Liệu Khoa Học</title>
      <link>http://dangkhoasdc.github.io/post/viet-luan-van/</link>
      <pubDate>Thu, 09 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://dangkhoasdc.github.io/post/viet-luan-van/</guid>
      <description>

&lt;p&gt;Sau thời gian đắng lòng vì cái luận văn và phải lên bờ xuống ruộng với nhiều tình huống éo le cây me. Cũng thêm vào đó, sau cái sự vụ này rút ra được nhiều kinh nghiệm xương máu hơn bao giờ hết. Hiện giờ công việc dù vấn đang ngập mặt, nhưng có vẻ thư thả hơn, kèm theo đó kết quả thực nghiệm khá tốt, công việc trên lab cũng dần ổn định khiến tinh thần phấn chấn và có nhiều kế hoạch loạn xị ngầu hơn trong thời gian tới. Nhưng vẫn muốn viết tí tí cho vui.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dangkhoasdc.github.io/img/thankyou.jpg&#34; alt=&#34;Thank you&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;dùng-phần-mềm-phiên-bản-ổn-định&#34;&gt;Dùng phần mềm phiên bản ổn định&lt;/h2&gt;

&lt;p&gt;Mình đã phải lên bờ xuống ruộng với Mac Office 2016 Preview. Dù giao diện rất đẹp, UI&amp;amp;UX tốt hơn so với bản trước đó. Nhưng điều đắng lòng là mình không thể chèn công thức toán sử dụng MathType vô được. Chưa kể là một phần mềm khác để quản lý tài liệu tham khảo cũng không thể cài trên WORD 2016. Nên dù sao đi nữa, trong những công việc quan trọng và các phần mềm cần thiết không phải lúc nào cũng update lên hàng xịn là tốt.&lt;/p&gt;

&lt;h2 id=&#34;tự-động-hoá-các-công-việc-đánh-số&#34;&gt;Tự động hoá các công việc đánh số&lt;/h2&gt;

&lt;p&gt;Trong này bao gồm cả: đánh số trang, đánh chỉ mục hình ảnh, chỉ mục bảng biểu và chương. Điểm thuận lợi có thể kể đến như:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Không phải nhức não khi phải cập nhật lại chỉ mục khi thay đổi nội dung. Với những thành phần có sẵn trong Word, chỉ cần Ctrl+A và F9 hay F11 là nó đã tự động cập nhật lại rồi.&lt;/li&gt;
&lt;li&gt;Dễ dàng trỏ đến các phần tử này mà không mất thời gian. Nếu tự chèn thì không làm được trò này rồi.&lt;/li&gt;
&lt;li&gt;Quản lý các thành phần (công thức, tài liệu tham khảo, hình ảnh) khá là dễ dàng. Định nghĩa style của nó cũng dễ hơn nữa.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dĩ nhiên, lúc đầu xài thì cảm thấy khá là nhọc, vì không quen là chính. Nhưng đó là điều rất nên làm.&lt;/p&gt;

&lt;p&gt;Mình có một số kinh nghiệm có thể kể đến như&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Với công thức, luôn dùng hệ thống đánh số của MathType. Và như vậy, mỗi khi kết chương hay kết mục, phải chèn kí tự ngắt chương hoặc mục của MathType vô. Khi muốn tham chiếu đến 1 công thức nào đó cũng phải chèn bằng lệnh của MathType.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Với trích dẫn khoa học, một công cụ hay ho mà mình tìm được đó là Mendeley Desktop ( &lt;a href=&#34;https://www.mendeley.com/download-mendeley-desktop/&#34; target=&#34;_blank&#34;&gt;Download&lt;/a&gt; ). Nó có thể tìm kiếm tài liệu, lưu lại thông tin và cho phép chèn tham khảo, chèn danh mục tham khảo với nhiều định dạng khác nhau. Nó còn hỗ trợ Refman nên việc lấy citation từ Google Scholar về và chén vô cũng rất dễ, công cụ này hoạt động khá là thông minh nên xài khá thoải mái. Hầu như mình không cần phải lo lắng về chuyện trích dẫn nữa. Một tính năng bá đạo của nó là có thể lấy được thông tin bài báo bằng cách import vào file pdf. &lt;em&gt;so cool&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;nếu-được-sử-dụng-latex&#34;&gt;Nếu được, sử dụng Latex&lt;/h2&gt;

&lt;p&gt;Latex có lẽ là công cụ tốt nhất để biên tập các tài liệu khoa học.  Hệ thống biên soạn công thức phong phú, khả năng quản lý các thành phần, đánh số, &amp;hellip; nhất quán và dễ dùng. Tuy nhiên  công cụ này khá là đồ sộ, hiểu nó là một ngôn ngữ cũng được nữa. Nên chính điều đó khiến cho giai đoạn đầu của việc dùng Latex khá là khó khăn. Tuy nhiên với một số text editor có  snippet  thì việc nhớ các cú pháp chèn hình hay công thức không còn quá khó khăn nữa. Mình chỉ ngại mỗi Latex là khi phải debug những lỗi khi viết, mất rất nhiều thời gian và không phải lúc nào cũng theo ý mình được. Vì lẽ đó mà mình xài Word 2011 cho an toàn.&lt;/p&gt;

&lt;h2 id=&#34;định-nghĩa-tất-cả-style-trước-khi-viết&#34;&gt;Định nghĩa tất cả style trước khi viết&lt;/h2&gt;

&lt;p&gt;Khi buộc phải viết theo một định dạng nào đó, chuyện đầu tiên khi mở một văn bản mới là định nghĩa hết tất cả stule dùng trong đó, từ Heading 1, Heading 2,  TOC, đánh số,&amp;hellip; Điều này tạo sự nhất quán trong quá trình viết, không phải đợi tới lúc viết xong mới làm chuyện này sẽ mất thời gian và xuất hiện một số lỗi ngoài ý muốn.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
